# Apache graphs
Apache_Bytes:
    glob_verify: apache/apache_bytes.wsp
    areaAlpha: 0.2
    hideLegend: true
    yUnitSystem: binary
    target:
    - 'stacked(collectd.${host}.apache.apache_bytes)'

Apache_Connections_and_Requests:
    glob_verify: apache
    target:
    - 'aliasByMetric(collectd.${host}.apache.apache_connections)'
    - 'aliasByMetric(collectd.${host}.apache.apache_requests)'

Apache_Scoreboard:
    glob_verify: apache/scoreboard
    hideLegend: false
    areaAlpha: 0.8
    areaMode: stacked
    target:
    - 'aliasByMetric(sortByMinima(maximumAbove(collectd.${host}.apache.scoreboard.[a-np-z]*,0.1)))'
    - 'aliasByMetric(color(collectd.${host}.apache.scoreboard.open,"${color_free}"))'


# Apache Access All graphs (Tail graphs)
Apache_Access_All_First_Byte:
    glob_verify: tail/access_log_all/first_byte
    vtitle: ms
    target:
    - 'substr(scale(collectd.${host}.tail.access_log_all.first_byte.{avg,min},0.001),5)'
    - 'substr(secondYAxis(scale(collectd.${host}.tail.access_log_all.first_byte.max,0.001)),5)'

Apache_Access_All_Response:
    glob_verify: tail/access_log_all/response
    vtitle: ms
    target:
    - 'substr(scale(collectd.${host}.tail.access_log_all.response.{avg,min},0.001),5)'
    - 'substr(secondYAxis(scale(collectd.${host}.tail.access_log_all.response.max,0.001)),5)'

Apache_Access_All_Status:
    glob_verify: tail/access_log_all/status
    hideLegend: false
    vtitle: percent
    yMin: 0
    target:
    - 'substr(sortByMaxima(asPercent(collectd.${host}.tail.access_log_all.status.{206,[3-5]*},collectd.${host}.tail.access_log_all.status.total)),5)'

Apache_Access_All_Status_Bad:
    glob_verify: tail/access_log_all/status
    hideLegend: false
    vtitle: percent
    yMin: 0
    target:
    - 'substr(sortByMaxima(asPercent(collectd.${host}.tail.access_log_all.status.[4-5]*,collectd.${host}.tail.access_log_all.status.total)),5)'


# APC graphs
APC_Memory:
    glob_verify: curl_json/apc/memory
    areaAlpha: 0.8
    areaMode: stacked
    colorList: blue,red,green
    yMin: 0
    yUnitSystem: binary
    target:
    - 'aliasByMetric(collectd.${host}.curl_json.apc.memory.{cache-files,cache-user,cache-available})'

APC_Ops:
    glob_verify: curl_json/apc/cache_eviction
    target:
    - 'substr(collectd.${host}.curl_json.apc.cache_operation.*,5)'
    - 'aliasSub(substr(collectd.${host}.curl_json.apc.cache_eviction.*,5),"^ops-","")'

APC_Files_Ops_Percent:
    glob_verify: curl_json/apc/cache_operation/files-hits.wsp
    areaAlpha: 0.8
    areaMode: stacked
    vtitle: percent
    yMin: 0
    yMax: 100
    target:
    - 'aliasSub(substr(asPercent(collectd.${host}.curl_json.apc.cache_operation.{files-hits,files-misses}),5),"^files-","")'

APC_User_Ops_Percent:
    glob_verify: curl_json/apc/cache_operation/user-hits.wsp
    areaAlpha: 0.8
    areaMode: stacked
    vtitle: percent
    yMin: 0
    yMax: 100
    target:
    - 'aliasSub(substr(asPercent(collectd.${host}.curl_json.apc.cache_operation.{user-hits,user-misses}),5),"^user-","")'


# Carbon graphs
Carbon_Cache_Avg_Update_Time:
    carbon_match: true
    areaAlpha: 0.2
    hideLegend: true
    target:
    - 'stacked(keepLastValue(carbon.agents.${host}-a.avgUpdateTime))'

Carbon_Cache_Errors:
    carbon_match: true
    areaAlpha: 0.2
    hideLegend: true
    target:
    - 'stacked(keepLastValue(carbon.agents.${host}-a.errors))'

Carbon_Cache_Points_per_update:
    carbon_match: true
    areaAlpha: 0.2
    hideLegend: true
    lineMode: staircase
    target:
    - 'stacked(keepLastValue(carbon.agents.${host}-a.pointsPerUpdate))'

Carbon_Cache_Queues:
    carbon_match: true
    areaAlpha: 0.2
    hideLegend: true
    target:
    - 'stacked(keepLastValue(carbon.agents.${host}-a.cache.queues))'

Carbon_Cache_Queries:
    carbon_match: true
    areaAlpha: 0.2
    hideLegend: true
    target:
    - 'stacked(keepLastValue(carbon.agents.${host}-a.cache.queries))'

Carbon_Metrics:
    carbon_match: true
    vtitle: points
    target:
    - 'alias(keepLastValue(carbon.aggregator.${host}-a.metricsReceived),"aggregator_received")'
    - 'alias(keepLastValue(carbon.agents.${host}-a.metricsReceived),"cache_received")'
    - 'alias(keepLastValue(carbon.agents.${host}-a.committedPoints),"cache_committed")'


# CPU graphs
CPU:
    glob_verify: cpu
    areaAlpha: 0.8
    areaMode: stacked
    target:
    - 'aliasSub(sortByMinima(groupByNode(transformNull(exclude(collectd.${host}.cpu.*.*,"idle"),0),4,"sumSeries")),", 0","")'
    - 'substr(color(sumSeries(collectd.${host}.cpu.*.idle),"${color_free}"),4)'


# DF graphs
DF:
    areaAlpha: 0.8
    title: DF_${metric}
    glob_metrics: df/*
    glob_verify: .
    yMin: 0
    yUnitSystem: binary
    target:
    - 'substr(stacked(collectd.${host}.df.${metric}.{used,reserved}),4)'
    - 'substr(color(stacked(collectd.${host}.df.${metric}.free),"${color_free}"),4)'
    - 'alias(color(scale(sumSeries(collectd.${host}.df.${metric}.*),0.8),"white"),"80pct")'


# Disk graphs
Disk_octets:
    title: Disk_${metric}_octets
    glob_metrics: disk/*
    glob_verify: octets
    yUnitSystem: binary
    target:
    - 'alias(color(sumSeries(collectd.${host}.disk.${metric}.octets.*),"${color_combined}"),"combined")'
    - 'substr(collectd.${host}.disk.${metric}.octets.*,5)'

Disk_ops:
    title: Disk_${metric}_ops
    glob_metrics: disk/*
    glob_verify: ops
    target:
    - 'alias(color(sumSeries(collectd.${host}.disk.${metric}.ops.*),"${color_combined}"),"combined")'
    - 'substr(collectd.${host}.disk.${metric}.ops.*,5)'

Disk_time:
    title: Disk_${metric}_time
    glob_metrics: disk/*
    glob_verify: time
    target:
    - 'alias(color(sumSeries(collectd.${host}.disk.${metric}.time.*),"${color_combined}"),"combined")'
    - 'substr(collectd.${host}.disk.${metric}.time.*,5)'


# Entropy graphs
Entropy:
    glob_verify: entropy.wsp
    areaAlpha: 0.2
    hideLegend: false
    yMax: 4096
    yMin: 0
    yUnitSystem: binary
    target:
    - 'cactiStyle(alias(stacked(collectd.${host}.entropy),""))'


# Interface graphs
Interface_errors:
    title: Interface_${metric}_errors
    glob_metrics: interface/*
    glob_verify: errors
    target:
    - 'alias(color(sumSeries(collectd.${host}.interface.${metric}.errors.*),"${color_combined}"),"combined")'
    - 'substr(collectd.${host}.interface.${metric}.errors.*,5)'

Interface_octets:
    title: Interface_${metric}_octets
    glob_metrics: interface/*
    glob_verify: octets
    yUnitSystem: binary
    target:
    - 'alias(color(sumSeries(collectd.${host}.interface.${metric}.octets.*),"${color_combined}"),"combined")'
    - 'substr(collectd.${host}.interface.${metric}.octets.*,5)'

Interface_packets:
    title: Interface_${metric}_packets
    glob_metrics: interface/*
    glob_verify: packets
    target:
    - 'alias(color(sumSeries(collectd.${host}.interface.${metric}.packets.*),"${color_combined}"),"combined")'
    - 'substr(collectd.${host}.interface.${metric}.packets.*,5)'


# Load graphs
Load:
    glob_verify: load
    yMin: 0
    target:
    - 'substr(sortByMaxima(collectd.${host}.load.*),3)'


# Memcached graphs
Memcached_Cache:
    areaAlpha: 0.8
    areaMode: stacked
    glob_verify: memcached/cache
    yMin: 0
    target:
    - 'aliasByMetric(collectd.${host}.memcached.cache.used)'
    - 'aliasByMetric(color(collectd.${host}.memcached.cache.free,"${color_free}"))'

Memcached_Items:
    glob_verify: memcached/items.wsp
    areaAlpha: 0.2
    areaMode: stacked
    hideLegend: true
    yMin: 0
    target:
    - 'stacked(collectd.${host}.memcached.items)'

Memcached_Commands_and_Evictions:
    glob_verify: memcached/command
    areaAlpha: 0.8
    hideLegend: false
    target:
    - 'substr(stacked(sortByMinima(collectd.${host}.memcached.command.{set,get})),4)'
    - 'lineWidth(aliasByMetric(collectd.${host}.memcached.ops.evictions),2)'

Memcached_Ops:
    glob_verify: memcached/command
    areaAlpha: 0.8
    areaMode: stacked
    hideLegend: false
    colorList: red,blue
    target:
    - 'aliasByMetric(sortByMinima(collectd.${host}.memcached.ops.{misses,hits}))'

Memcached_Hit_Ratio:
    glob_metrics: memcached
    glob_verify: hitratio.wsp
    areaAlpha: 0.8
    areaMode: stacked
    vtitle: percent
    yMax: 100
    yMin: 0
    target:
    - 'substr(asPercent(collectd.memcache-a0.memcached.ops.{hits,misses}),4)'

Memcached_Connections:
    glob_verify: memcached/connections.wsp
    areaAlpha: 0.2
    areaMode: stacked
    hideLegend: true
    yMin: 0
    target:
    - 'collectd.${host}.memcached.connections'

Memcached_Octets:
    glob_verify: memcached/octets
    yUnitSystem: binary
    target:
    - 'alias(color(sumSeries(collectd.${host}.memcached.octets.*),"${color_combined}"),"combined")'
    - 'aliasByMetric(collectd.${host}.memcached.octets.*)'

Memcached_Processes:
    glob_verify: memcached/ps_count
    yMin: 0
    target:
    - 'aliasByMetric(collectd.${host}.memcached.ps_count.*)'

Memcached_CPU_Time:
    glob_verify: memcached/ps_cputime
    areaAlpha: 0.8
    areaMode: stacked
    target:
    - 'aliasByMetric(sortByMinima(collectd.${host}.memcached.ps_cputime.*))'


# Memory graphs
Memory:
    glob_verify: memory
    areaAlpha: 0.8
    areaMode: stacked
    yMin: 0
    yUnitSystem: binary
    target:
    # explicit metric names to ensure order
    - 'aliasByMetric(collectd.${host}.memory.{used,buffered,cached})'
    - 'aliasByMetric(color(collectd.${host}.memory.free,"${color_free}"))'


# MySQL graphs
MySQL_Cache_Size:
    glob_verify: mysql/collectd_mon
    hideLegend: true
    target:
    - 'substr(collectd.${host}.mysql.collectd_mon.cache_size,4)'

MySQL_Cache_Result:
    glob_verify: mysql/collectd_mon/cache_result
    areaAlpha: 0.8
    areaMode: stacked
    target:
    - 'substr(sortByMinima(collectd.${host}.mysql.collectd_mon.cache_result.*),5)'

MySQL_top_six_Commands:
    glob_verify: mysql/collectd_mon/mysql_commands
    areaAlpha: 0.8
    areaMode: stacked
    hideLegend: false
    target:
    - 'substr(sortByMinima(highestMax(collectd.${host}.mysql.collectd_mon.mysql_commands.*,6)),5)'

MySQL_Threads:
    glob_verify: mysql/collectd_mon/threads
    target:
    - 'substr(sortByMaxima(collectd.${host}.mysql.collectd_mon.threads.*),5)'

MySQL_Locks:
    glob_verify: mysql/collectd_mon/mysql_locks
    target:
    - 'substr(sortByMaxima(collectd.${host}.mysql.collectd_mon.mysql_locks.*),5)'

MySQL_Octets:
    glob_verify: mysql/collectd_mon/mysql_octets
    yUnitSystem: binary
    target:
    - 'substr(collectd.${host}.mysql.collectd_mon.mysql_octets.*,5)'


# NFS graphs
NFS_Client:
    glob_verify: nfs/client
    areaAlpha: 0.8
    areaMode: stacked
    drawNullAsZero: true
    hideLegend: false
    target:
    - 'substr(sortByMinima(highestAverage(collectd.${host}.nfs.client.*,6)),4)'

NFS_Server:
    glob_verify: nfs/server
    areaAlpha: 0.8
    areaMode: stacked
    drawNullAsZero: true
    hideLegend: false
    target:
    - 'substr(sortByMinima(highestAverage(collectd.${host}.nfs.server.*,6)),4)'


# NTPd graphs
NTP_Offset:
    glob_verify: ntpd/time_offset
    yMax: 1
    yMin: -1
    target:
    # Limit reported hosts to first 4 IPs
    - 'aliasSub(aliasByMetric(limit(collectd.${host}.ntpd.time_offset.[0-9]*,4)),"-",".")'


# Postfix graphs (Exec and Tail graphs)
Postfix_Delays:
    glob_verify: tail/postfix/delay
    drawNullAsZero: true
    target:
    - 'substr(collectd.${host}.tail.postfix.delay.total,5)'
    - 'substr(sortByMaxima(transformNull(exclude(collectd.${host}.tail.postfix.delay.*,"total"),0)),5)'

Postfix_Inbound_Connections:
    glob_verify: tail/postfix/conn-in
    target:
    - 'substr(collectd.${host}.tail.postfix.conn-in.open,5)'
    - 'substr(sortByMaxima(maximumAbove(exclude(collectd.${host}.tail.postfix.conn-in.*,"open"),0.1)),5)'

Postfix_Message_Size:
    glob_verify: tail/postfix/message-size.wsp
    areaAlpha: 0.2
    hideLegend: true
    yUnitSystem: binary
    target:
    - 'stacked(collectd.${host}.tail.postfix.message-size)'

Postfix_Queue_Size:
    glob_verify: postfix/queue_length
    yMin: 0
    target:
    - 'alias(sumSeries(collectd.${host}.postfix.queue_length.*),"total")'
    - 'aliasByMetric(collectd.${host}.postfix.queue_length.*)'

Postfix_Outbound_Connections:
    glob_verify: tail/postfix/conn-out
    target:
    - 'substr(collectd.${host}.tail.postfix.conn-out.*,5)'

Postfix_Rejected:
    glob_verify: tail/postfix/rejected
    target:
    - 'aliasByMetric(collectd.${host}.tail.postfix.rejected.total)'
    - 'sortByMaxima(exclude(aliasByMetric(collectd.${host}.tail.postfix.rejected.*),"total"))'

Postfix_Status:
    glob_verify: tail/postfix/status
    target:
    - 'substr(sortByMaxima(collectd.${host}.tail.postfix.status.sent),5)'
    - 'substr(sortByMaxima(maximumAbove(exclude(collectd.${host}.tail.postfix.status.*,"sent"),0.1)),5)'


# Processes graphs
Process_State:
    glob_verify: processes/ps_state
    areaAlpha: 0.8
    areaMode: stacked
    target:
    - 'substr(sortByMinima(transformNull(exclude(collectd.${host}.processes.ps_state.*,"sleeping"),0)),4)'
    - 'substr(color(collectd.${host}.processes.ps_state.sleeping,"${color_free}"),4)'

Process_Fork_Rate:
    glob_verify: processes/fork_rate.wsp
    areaAlpha: 0.2
    hideLegend: true
    target:
    - 'stacked(collectd.${host}.processes.fork_rate)'


# Swap graphs
Swap:
    glob_verify: swap
    areaAlpha: 0.8
    areaMode: stacked
    yMin: 0
    yUnitSystem: binary
    target:
    - 'substr(collectd.${host}.swap.{used,cached},3)'
    - 'substr(color(collectd.${host}.swap.free,"${color_free}"),3)'


# Uptime
Uptime:
    glob_verify: uptime.wsp
    areaAlpha: 0.2
    hideLegend: true
    vtitle: days
    yMin: 0
    target:
    - 'stacked(scale(collectd.${host}.uptime,0.00001157))'


# Users graphs
Users:
    glob_verify: users.wsp
    areaAlpha: 0.2
    hideLegend: true
    yMin: 0
    target:
    - 'stacked(collectd.${host}.users)'
    - 'color(collectd.${host}.users,"blue")'

# Varnish
Varnish_Backend:
    glob_verify: varnish/backend
    target:
    - 'substr(sortByMaxima(collectd.${host}.varnish.backend.*),4)'

Varnish_Cache:
    glob_verify: varnish/cache
    target:
    - 'substr(sortByMaxima(collectd.${host}.varnish.cache.*),4)'

Varnish_Cache_Percent:
    glob_verify: varnish/cache
    areaAlpha: 0.8
    areaMode: stacked
    vtitle: percent
    yMax: 100
    yMin: 0
    target:
    - 'substr(sortByMaxima(asPercent(collectd.${host}.varnish.cache.{hit,miss,hitpass})),4)'

Varnish_Client:
    glob_verify: varnish/client
    target:
    - 'substr(sortByMaxima(collectd.${host}.varnish.client.*),4)'

# Varnish Combined graphs (Tail graphs)
Varnish_Combined_Status:
    glob_verify: tail/varnish_combined/status
    hideLegend: false
    vtitle: percent
    yMin: 0
    target:
    - 'substr(sortByMaxima(asPercent(collectd.${host}.tail.varnish_combined.status.{206,[3-5]*},collectd.${host}.tail.varnish_combined.status.total)),5)'

Varnish_Combined_Status_Bad:
    glob_verify: tail/varnish_combined/status
    hideLegend: false
    vtitle: percent
    yMin: 0
    target:
    - 'substr(sortByMaxima(asPercent(collectd.${host}.tail.varnish_combined.status.[4-5]*,collectd.${host}.tail.varnish_combined.status.total)),5)'
